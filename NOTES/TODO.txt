solution description:
---------------------
a. create a template with the musts
    0. proper flow (index, server, app, router, body validation, controller, service, dal + best practices) -J
    0.1 proper REST-FULLs API's -J
    1. proper middlewares => and look for a good source to even know what middlewares to use
        b. security
            I. hpp
            II. halmet
            III. cors
            IV. rate limiter
            V. body check
            VI. ...
        c. parsing
            I. url params
            II. cookie parsing
            III. body parsing
            IV....
        d. flow
            I. catch unhandeled requests
            II. catch errors
            III. add some token / ID to requests
            IV. session
        e. and more
    1.2. proper dependency inversion *i made a custom repo that might be good for that* 
פשוט כל מחלקה מקבלת בקונסטרקטור את כל
    constructor(
        private notPopularImplementation: mightBePopularInterface = (new) NotPopularImplementation() /.singleton() / .prototype(implementation params) / any other creational pattetn
        private popularImplementation: popularInterface = dependencyIndex.popularInterface()
    ){}

    
                                                            מבחינת פיתוח, הסדר הוא כזה
                                                                  כותבים מחלקה 
                                                          ואז משתמשים באינטרפייסים שקימים | או שלא קיימים 
                                                        ואז זה אינטרפייסים קיימים מדלגים על השלב | או שכותבים אותם
ואז משתמשים במחלקה קיימת שמממשת | כותבים מימוש נוסף לאינטרפיס | כותבים מחלקה ראשונה שממשת את האינטרפייס עם הפונקציונאליות שאנחנו צריכים
                                  ואז חוזרים למחלקה הראשונה ושמים את המחלקות האלה כדיפולטיביות בקונסטרקטור
        ואז אם מחלקה אחרת תרצה להשתמש במחלקה הזאת עם ערכים אחרים, היא פשוט בדיפולט בקונסטראקטור תממשת את המחלקה עם ערכים אחרים                    
                                                                     וחוזר חלילה.
                                                        עד שמגיעים למחלקות שלא צריכות כלום
                                      ואז כשהתוכנית רצה פשוט ממשים את המחלקה הראשית ביותר וכל השאר דיפולטיבי
                ואז צריך הזרקה רק בשביל מחלקות שחוזרות על עצמן הרבה ויכולות להשתנות כמו לוגר, קונפיג, חיבור לבסיס נתונים שפופולארי בדאל, 
    2. propper error handling accross the app
        1. a documented standard for handling and loggind about it
        2. also handle unhandled requests
        3. response codes
    3. syntax standards
        a. linting
        b. just standarts
    4. DB connectors (let's say mongo and mysql, but two at least to keep everything abstract)
    5. cashing with Redis
    7. proper logging => extemd morgan and create your own package
        a. standard for matrixes
        b. avoid logging secrets
        c. readable by humans and machines
        d. more best practices
    8. proper documentation
        a. update readme
        b. read about documentation best practices
        c. an automatic documentation solution
    9. proper tests (unit + end to end)
        a. unit test examples
        b. integration test examples
        c. end to end test examples
        d. different test scripts (allFiles/openFiles, verbose?, watch?)
        e. different test debug (lunch) configs (all Files/open Files, verbose?, watch?)
    10. proper configuration loading (env's ) => כרגע פשוט להשתמש במה שהכנתי ולזרום על זה כבר *i made a custom repo that might be good for that*
        a. comment above every group in what module are they used
        b. can be built from separate files 
        c. an example template
        d. changeable and unchangeable groups (object.lock/freeze)
        e. a single source of truth (having eventually one single place that concentrates all the configurations)
        f. importable (singleton) & (last import by default always runing first)
        g. some validation library (the validation also provide some documentation)
        h. exported with types
    11. tsconfig.json - create different files for 'prod' and 'dev' 
a.2 another template to work as a *events streaming consumer* instead of *http server*

b. add the none 'must' features / stuff i wanna learn
    1. template module for websockets
    2. proper initialization proccess (some modules are dependant on other like env's => secrets => third party => update env's)
    3. add some design patterns example
    4. security
        I. HTTPS handshake - recall this,
        II. JWT - then learn this
    5. keeping with the k8s course - connecting to a streaming service (changes the structure of the services)
    6. config initialization process (loading & conditionals)
            I. for loading sources
                - config maps
                - for accessing some secrets provider
            II. for conditional values
                - keys with values dependent of dev / prod
                - any other keys that their values depends on other config values
    7. proper ci/cd

